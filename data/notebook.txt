['# Getting started with Langchain\n', '\n', 'In this tutorial, we will walk through the basics of using LangChain to create a simple AI chatbot that can answer questions using OpenAI and Serpapi.']
['# import libraries\n', 'import os\n', 'from langchain.llms import OpenAI']
['#create a new openai api key\n', '#os.environ["OPENAI_API_KEY"] = "..."']
['# set up openai api key\n', "openai_api_key = os.environ.get('OPENAI_API_KEY')"]
['### The temperature of a llm is a hyperparameter that controls the randomness of the output. It is a value between 0 and 1. A higher temperature will result in more random output. A lower temperature will result in more predictable output. For this tutorial, we will set the temperature to 0.9. You can play aroun with this yourself to see how it affects the output.']
['# create a llm\n', 'llm = OpenAI(temperature = 0.9)']
['text = "What are 4 countries where they eat a lot of potatoes?"\n', 'print(llm(text))']
['### This works! But what if we what if we want to ask a question about a different food? We can use the prompt template class to do this.']
['# Getting started with prompt templates\n', '\n', '### A prompt template is a string that contains variables that can be filled in with different values. For example, you could have a prompt template that looks like this:']
['from langchain.prompts import PromptTemplate']
['prompt = PromptTemplate(\n', '    input_variables=["food"],\n', '    template="What are 4 countries where they eat a lot of {food}?",\n', ')']
['print(prompt.format(food="potatoes"))']
['print(llm(prompt.format(food="potatoes")))']
['Notice how the answer is different from the previous one. This is because of the randomness of the llm. If we want to get the same answer every time, we can set the seed of the llm.']
['print(llm(prompt.format(food="rice")))']
['# Chaining\n', '\n', '### Here, we combine LLMs and prompts in multistep workflows using the prompt template class.']
['from langchain.prompts import PromptTemplate\n', 'from langchain.llms import OpenAI\n', 'from langchain.chains import LLMChain']
['llm = OpenAI(temperature=0.9)\n', '\n', 'prompt = PromptTemplate(\n', '    input_variables=["food"],\n', '    template="What are 4 countries where they eat a lot of {food}?",\n', ')']
['chain = LLMChain(llm=llm, prompt=prompt)']
['print(chain.run("potatoes"))\n', 'print(chain.run("rice"))']
['# Agents: Dynamically call chains based on user input\n', '\n', 'SerpApi is a search engine results page (SERP) scraping and parsing API that allows developers to retrieve and analyze data from various search engines, including Google, Bing, Yahoo, and more.\n', '\n', '\n', 'To use SerpApi in Python, you will need to install the SerpApi Python module using pip. An API key can be created here:\n', '\n', '[Serpapi key](https://serpapi.com/users/sign_up)\n', '\n', '[Serpapi documentation](https://python.langchain.com/en/latest/modules/agents/tools/examples/serpapi.html)\n', '\n', 'In the next part, we are going to combine OpenAI with SerpApi to create a chatbot that can answer questions with internet search results.\n', '\n', '[Agent langchain documentation](https://python.langchain.com/en/latest/modules/agents.html)\n', '\n', '\n']
['# Install serpapi\n', '#!pip install google-search-results']
['#import libraries\n', 'from langchain.agents import load_tools\n', 'from langchain.agents import initialize_agent\n', 'from langchain.llms import OpenAI']
['# Load the model\n', 'llm = OpenAI(temperature=0)']
['Tools are functions that agents can use to interact with the world. These tools can be generic utilities (e.g. search), other chains, or even other agents.\n', 'Here we use the SerpApi and llm-math tools. We will use the SerpApi tool to search the internet for answers to our questions. We will use the llm-math tool to answer math questions.\n', '\n', '[Tools documentation](https://python.langchain.com/en/latest/modules/agents/tools/getting_started.html)']
['# Load in some tools to use\n', '\n', '#os.environ["SERPAPI_API_KEY"] = "..."\n', '\n', 'tools = load_tools(["serpapi", "llm-math"], llm=llm)']
["### Finally, let's initialize an agent with:\n", ' 1. The tools\n', ' 2. The language model\n', ' 3. The type of agent we want to use.']
['agent = initialize_agent(tools, llm, agent="zero-shot-react-description", verbose=True)']
['For the agent, I have chosen the zero-shot-react-description agent. This agent uses the ReAct framework to determine which tool to use based solely on the toolâ€™s description. Any number of tools can be provided. This agent requires that a description is provided for each tool.\n', '\n', '[Agent types](https://python.langchain.com/en/latest/modules/agents/agents/agent_types.html)\n', '\n', "By setting verbose=True, we can see the agent's internal state as it processes the input.\n", '\n', 'Other agent types could also be chosen\n', '\n', 'Now, let us ask our agent a question for which it will use the serpapi tool to search the internet for an answer and need to calculate the answer using the llm-math tool.']
['agent.run("What is the hight of Obama? And how many cans of coke can you stack to reach that height?")']
['# Memory: Add state to chains and agents\n', '\n', 'By adding memory to our agents, we can make them more dynamic and interactive. We can have a conversation and the agent will remember what we said and use that information to answer our questions.\n']
['from langchain import OpenAI, ConversationChain']
['llm = OpenAI(temperature=0)\n', 'conversation = ConversationChain(llm=llm, verbose=True)']
['conversation.predict(input="Hi how are you doing!")']
['conversation.predict(input="I\'m doing well! Just having a conversation with my newly created langchain agent with memory.")']
['conversation.predict(input="I would like to get to know a bit about what LangChain is")']
['# Continue the conversation yourself!']
['conversation.predict(input="...")']
['# This is the end of the tutorial. We hope you enjoyed it!\n', '\n', 'Follow me on Github and Medium for more content:\n', '\n', '- [Github](https://github.com/rubentak)\n', '- [Medium](https://medium.com/@rubentak)']
[]
